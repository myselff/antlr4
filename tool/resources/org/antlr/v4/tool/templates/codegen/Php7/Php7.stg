/*
 * [The "BSD license"]
 *  Copyright (c) 2012-2016 Terence Parr
 *  Copyright (c) 2012-2016 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

javaTypeInitMap ::= [
	"int":"0",
	"float":"0.0",
	"bool":"false",
	default:"null" // anything other than a primitive type is an object
]

// args must be <object-model-object>, <fields-resulting-in-STs>

ParserFile(file, parser, namedActions, contextSuperClass) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<namedActions.header>

<parser>
>>

ListenerFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
//package <file.genPackage>;
<endif>
<header>
//import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link <file.parserName>}.
 */
interface <file.grammarName>Listener extends ParseTreeListener {
	<file.listenerNames:{lname |
/**
<if(file.listenerLabelRuleNames.(lname))>
 * Enter a parse tree produced by the {@code <lname>\}
 * labeled alternative in {@link <file.parserName>#<file.listenerLabelRuleNames.(lname)>\}.
<else>
 * Enter a parse tree produced by {@link <file.parserName>#<lname>\}.
<endif>
 * @param ctx the parse tree
 */
public function enter<lname; format="cap">(<lname; format="cap">Context $ctx);
/**
<if(file.listenerLabelRuleNames.(lname))>
 * Exit a parse tree produced by the {@code <lname>\}
 * labeled alternative in {@link <file.parserName>#<file.listenerLabelRuleNames.(lname)>\}.
<else>
 * Exit a parse tree produced by {@link <file.parserName>#<lname>\}.
<endif>
 * @param ctx the parse tree
 */
public function exit<lname; format="cap">(<lname; format="cap">Context $ctx);}; separator="\n">
}
>>

BaseListenerFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
//package <file.genPackage>;
<endif>
<header>

//import org.antlr.v4.runtime.ParserRuleContext;
//import org.antlr.v4.runtime.tree.ErrorNode;
//import org.antlr.v4.runtime.tree.TerminalNode;

/**
 * This class provides an empty implementation of {@link <file.grammarName>Listener},
 * which can be extended to create a listener which only needs to handle a subset
 * of the available methods.
 */
class <file.grammarName>BaseListener implements <file.grammarName>Listener {
	<file.listenerNames:{lname |
/**
 * {@inheritDoc\}
 *
 * \<p>The default implementation does nothing.\</p>
 */
public function enter<lname; format="cap">(<lname; format="cap">Context $ctx) { \}
/**
 * {@inheritDoc\}
 *
 * \<p>The default implementation does nothing.\</p>
 */
public function exit<lname; format="cap">(<lname; format="cap">Context $ctx) { \}}; separator="\n">

	/**
	 * {@inheritDoc\}
	 *
	 * \<p>The default implementation does nothing.\</p>
	 */
	public function enterEveryRule(ParserRuleContext $ctx) { }
	/**
	 * {@inheritDoc\}
	 *
	 * \<p>The default implementation does nothing.\</p>
	 */
	public function exitEveryRule(ParserRuleContext $ctx) { }
	/**
	 * {@inheritDoc\}
	 *
	 * \<p>The default implementation does nothing.\</p>
	 */
	public function visitTerminal(TerminalNode $node) { }
	/**
	 * {@inheritDoc\}
	 *
	 * \<p>The default implementation does nothing.\</p>
	 */
	public function visitErrorNode(ErrorNode $node) { }
}
>>

VisitorFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
//package <file.genPackage>;
<endif>
<header>
//import org.antlr.v4.runtime.tree.ParseTreeVisitor;

/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by {@link <file.parserName>}.
 *
 * @param \<T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
interface <file.grammarName>Visitor extends ParseTreeVisitor {
	<file.visitorNames:{lname |
/**
<if(file.visitorLabelRuleNames.(lname))>
 * Visit a parse tree produced by the {@code <lname>\}
 * labeled alternative in {@link <file.parserName>#<file.visitorLabelRuleNames.(lname)>\}.
<else>
 * Visit a parse tree produced by {@link <file.parserName>#<lname>\}.
<endif>
 * @param ctx the parse tree
 * @return the visitor result
 */
function visit<lname; format="cap">(<file.parserName>.<lname; format="cap">Context $ctx);}; separator="\n">
}
>>

BaseVisitorFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
//package <file.genPackage>;
<endif>
<header>
//import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;

/**
 * This class provides an empty implementation of {@link <file.grammarName>Visitor},
 * which can be extended to create a visitor which only needs to handle a subset
 * of the available methods.
 *
 * @param \<T> The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */
class <file.grammarName>BaseVisitor extends AbstractParseTreeVisitor implements <file.grammarName>Visitor
{
	<file.visitorNames:{lname |
/**
 * {@inheritDoc\}
 *
 * \<p>The default implementation returns the result of calling
 * {@link #visitChildren\} on {@code ctx\}.\</p>
 */
public function visit<lname; format="cap">(<file.parserName>.<lname; format="cap">Context $ctx) { return $this->visitChildren($ctx); \}}; separator="\n">
}
>>

fileHeader(grammarFileName, ANTLRVersion) ::= <<
\<?php
// Generated from <grammarFileName; format="java-escape"> by ANTLR <ANTLRVersion>
>>

Parser(parser, funcs, atn, sempredFuncs, superClass) ::= <<
namespace Antlr4\\<parser.name>;
<Parser_(ctor="parser_ctor", ...)>
>>

Parser_(parser, funcs, atn, sempredFuncs, ctor, superClass) ::= <<

class <parser.name>Data
{
	/**
	 * @var <parser.name>Data
	 */
	protected static $instance;

	/**
	 * @var Atn
	 */
	protected $atn;

	/**
	 * @var DFA[]
	 */
	protected $decisionToDFA;

	/**
	 * @var PredictionContextCache
	 */
	protected $sharedContextCache;

	/**
	 * @var Vocabulary
	 */
	protected $vocabulary;

	const GRAMMAR_FILE_NAME = "<parser.grammarFileName; format="java-escape">";

	<if(parser.tokens)>
	const
		<parser.tokens:{k | <k>=<parser.tokens.(k)>}; separator=", ", wrap, anchor>;
	<endif>
	const
		<parser.rules:{r | RULE_<r.name> = <r.index>}; separator=", ", wrap, anchor>;
	const RULE_NAMES = [
		<parser.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
	];
	const LITERAL_NAMES = [
    	<parser.literalNames:{t | <t>}; null="null", separator=", ", wrap, anchor>
    ];
    const SYMBOLIC_NAMES = [
    	<parser.symbolicNames:{t | <t>}; null="null", separator=", ", wrap, anchor>
    ];
    <atn>

	static public function getInstance(): <parser.name>Data
	{
		if (null === self::$instance) {
			self::$instance = new self();
		}

		return self::$instance;
	}

	protected function __construct()
	{
		Assert::equal("<file.ANTLRVersion>", RuntimeMetaData::VERSION);

		$this->vocabulary = new VocabularyImpl(self::LITERAL_NAMES, self::SYMBOLIC_NAMES);
		$this->atn = (new ATNDeserializer())->deserialize(str_split(self::SERIALIZED_ATN));

		for ($i = 0; i \< $this->atn->getNumberOfDecisions(); $i++) {
			$this->decisionToDfa[$i] = new DFA($this->atn->getDecisionState($i), $i);
		}
	}

	public function getAtn(): Atn
	{
		return $this->atn;
	}

	/** @return DFA[] */
	public function getDecisionToDfa(): array
	{
		return $this->decisionToDfa;
	}

	public function getSharedContextCache(): PredictionContextCache
	{
		return $this->sharedContextCache;
	}
}

class <parser.name> extends <superClass; null="Parser"> {
	use <funcs :{ func | <func.currentRule.name>Trait }; separator=",">;

	<namedActions.members>

	<parser:(ctor)()>


<if(sempredFuncs)>
	public function sempred(RuleContext $_localctx, int $ruleIndex, int $predIndex): boolean
	{
		switch ($ruleIndex) {
		<parser.sempredFuncs.values:{f|
case <f.ruleIndex>:
	return $this-><f.name>_sempred(/*(<f.ctxType>)*/$_localctx, $predIndex);}; separator="\n">
		}
		return true;
	}
	<sempredFuncs.values; separator="\n">
<endif>
}

<funcs; separator="\n">
>>

dumpActions(recog, argFuncs, actionFuncs, sempredFuncs) ::= <<
<if(actionFuncs)>
public function action(RuleContext $_localctx, int $ruleIndex, int $actionIndex) {
	switch ($ruleIndex) {
	<recog.actionFuncs.values:{f|
case <f.ruleIndex>:
	$this-><f.name>_action(/*(<f.ctxType>)*/$_localctx, $actionIndex);
	break;}; separator="\n">
	}
}
<actionFuncs.values; separator="\n">
<endif>
<if(sempredFuncs)>
public function sempred(RuleContext $_localctx, int $ruleIndex, int $predIndex): bool
{
	switch ($ruleIndex) {
	<recog.sempredFuncs.values:{f|
case <f.ruleIndex>:
	return $this-><f.name>_sempred(/*(<f.ctxType>)*/$_localctx, $predIndex);}; separator="\n">
	}
	return true;
}
<sempredFuncs.values; separator="\n">
<endif>
>>

parser_ctor(p) ::= <<
/**
 * @var ParserATNSimulator
 */
protected $interp;

public function __construct(TokenStream $input) {
	parent::__construct($input);

	$data = <p.name>Data::getInstance();
	$this->interp = new ParserATNSimulator($this, $data->getAtn(), $data->getDecisionToDfa(), $data->getSharedContextCache());
}
>>

/* This generates a private method since the actionIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleActionFunction(r, actions) ::= <<
private function <r.name>_action(<r.ctxType> $_localctx, int $actionIndex)
{
	switch ($actionIndex) {
	<actions:{index|
case <index>:
	<actions.(index)>
	break;}; separator="\n">
	}
}
>>

/* This generates a private method since the predIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleSempredFunction(r, actions) ::= <<
private function <r.name>_sempred(<r.ctxType> $_localctx, int $predIndex): bool
{
	switch ($predIndex) {
	<actions:{index|
case <index>:
	return <actions.(index)>;}; separator="\n">
	}
	return true;
}
>>

RuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs,namedActions,finallyAction,postamble,exceptions) ::= <<
<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

trait <currentRule.name>Trait
{
	/**
	 * throws RecognitionException
	 */
	<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>public final <endif>function <currentRule.name>(<args; separator=",">): <currentRule.ctxType>
	{
		$_localctx = new <currentRule.ctxType>($this->_ctx, $this->getState()<currentRule.args:{a | , $<a.name>}>);
		$this->enterRule($_localctx, <currentRule.startState>, <parser.name>Data::RULE_<currentRule.name>);
		<namedActions.init>
		<locals; separator="\n">
		try {
	<if(currentRule.hasLookaheadBlock)>
			$_alt = 0;
	<endif>
			<code>
			<postamble; separator="\n">
			<namedActions.after>
		}
		<if(exceptions)>
		<exceptions; separator="\n">
		<else>
		catch (RecognitionException $re) {
			$_localctx->exception = $re;
			$this->_errHandler->reportError($this, $re);
			$this->_errHandler->recover($this, $re);
		}
		<endif>
		finally {
			<finallyAction>
			$this->exitRule();
		}
		return $_localctx;
	}
}
>>

LeftRecursiveRuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs,
	namedActions,finallyAction,postamble) ::=
<<
<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

trait <currentRule.name>Trait
{
	/**
	 * @throws RecognitionException
	 */
	<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>public final <endif>function <currentRule.name>(<args; separator=", ">): <currentRule.ctxType>
	{
		return $this->_<currentRule.name>(0<currentRule.args:{a | , $<a.name>}>);
	}

	/**
	 * @throws RecognitionException
	 */
	private function _<currentRule.name>(int $_p<args:{a | , <a>}>): <currentRule.ctxType>
	{
		$_parentctx = $this->_ctx;
		$_parentState = $this->getState();
		$_localctx = new <currentRule.ctxType>($this->_ctx, $_parentState<currentRule.args:{a | , <a.name>}>);

		$_prevctx = $this->_localctx;
		$_startState = <currentRule.startState>;
		$this->enterRecursionRule($_localctx, <currentRule.startState>, <parser.name>Data::RULE_<currentRule.name>, $_p);
		<namedActions.init>
		<locals; separator="\n">
		try {
	<if(currentRule.hasLookaheadBlock)>
			$_alt = null;
	<endif>
			<code>
			<postamble; separator="\n">
			<namedActions.after>
		}
		catch (RecognitionException $re) {
			$_localctx->exception = $re;
			$this->_errHandler->reportError($this, $re);
			$this->_errHandler->recover($this, $re);
		}
		finally {
			<finallyAction>
			$this->unrollRecursionContexts($_parentctx);
		}
		return $_localctx;
	}
}
>>

CodeBlockForOuterMostAlt(currentOuterMostAltCodeBlock, locals, preamble, ops) ::= <<
<if(currentOuterMostAltCodeBlock.altLabel)>_localctx = new <currentOuterMostAltCodeBlock.altLabel; format="cap">Context(_localctx);<endif>
$this->enterOuterAlt($_localctx, <currentOuterMostAltCodeBlock.alt.altNum>);
<CodeBlockForAlt(currentAltCodeBlock=currentOuterMostAltCodeBlock, ...)>
>>

CodeBlockForAlt(currentAltCodeBlock, locals, preamble, ops) ::= <<
{
<locals; separator="\n">
<preamble; separator="\n">
<ops; separator="\n">
}
>>

LL1AltBlock(choice, preamble, alts, error) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
<if(choice.label)>$<labelref(choice.label)> = $this->_input->LT(1);<endif>
<preamble; separator="\n">
switch ($this->_input->LA(1)) {
<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
	<alt>
	break;}; separator="\n">
default:
	<error>
}
>>

LL1OptionalBlock(choice, alts, error) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
switch ($this->_input->LA(1)) {
<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
	<alt>
	break;}; separator="\n">
default:
	break;
}
>>

LL1OptionalBlockSingleAlt(choice, expr, alts, preamble, error, followExpr) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
<preamble; separator="\n">
if (<expr>) {
	<alts; separator="\n">
}
<!else if ( !(<followExpr>) ) <error>!>
>>

LL1StarBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
<preamble; separator="\n">
while (<loopExpr>) {
	<alts; separator="\n">
	$this->setState(<choice.loopBackStateNumber>);
	$this->_errHandler->sync($this);
	<iteration>
}
>>

LL1PlusBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
$this->setState(<choice.blockStartStateNumber>); <! alt block decision !>
$this->_errHandler->sync($this);
<preamble; separator="\n">
do {
	<alts; separator="\n">
	$this->setState(<choice.stateNumber>); <! loopback/exit decision !>
	$this->_errHandler->sync($this);
	<iteration>
} while ( <loopExpr> );
>>

// LL(*) stuff

AltBlock(choice, preamble, alts, error) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
<if(choice.label)>$<labelref(choice.label)> = $this->_input->LT(1);<endif>
<preamble; separator="\n">
switch ( $this->getInterpreter()->adaptivePredict($this->_input, <choice.decision>, $this->_ctx) ) {
<alts:{alt |
case <i>:
	<alt>
	break;}; separator="\n">
}
>>

OptionalBlock(choice, alts, error) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
switch ( $this->getInterpreter()->adaptivePredict($this->_input, <choice.decision>, $this->_ctx) ) {
<alts:{alt |
case <i><if(!choice.ast.greedy)>+1<endif>:
	<alt>
	break;}; separator="\n">
}
>>

StarBlock(choice, alts, sync, iteration) ::= <<
$this->setState(<choice.stateNumber>);
$this->_errHandler->sync($this);
$_alt = $this->getInterpreter()->adaptivePredict($this->_input, <choice.decision>, $this->_ctx);
while ( $_alt != <choice.exitAlt> && $_alt != Atn::INVALID_ALT_NUMBER ) {
	if ( $_alt == 1<if(!choice.ast.greedy)>+1<endif> ) {
		<iteration>
		<alts> <! should only be one !>
	}
	$this->setState(<choice.loopBackStateNumber>);
	$this->_errHandler->sync($this);
	$_alt = $this->getInterpreter()->adaptivePredict($this->_input, <choice.decision>, $this->_ctx);
}
>>

PlusBlock(choice, alts, error) ::= <<
$this->setState(<choice.blockStartStateNumber>); <! alt block decision !>
$this->_errHandler->sync($this);
$_alt = 1<if(!choice.ast.greedy)>+1<endif>;
do {
	switch ($this->_alt) {
	<alts:{alt|
case <i><if(!choice.ast.greedy)>+1<endif>:
	<alt>
	break;}; separator="\n">
	default:
		<error>
	}
	$this->setState(<choice.loopBackStateNumber>); <! loopback/exit decision !>
	$this->_errHandler->sync($this);
	$_alt = $this->getInterpreter()->adaptivePredict($this->_input, <choice.decision>, $this->_ctx);
} while ( $_alt != <choice.exitAlt> && $_alt != Atn.INVALID_ALT_NUMBER );
>>

Sync(s) ::= "sync(<s.expecting.name>);"

ThrowNoViableAlt(t) ::= "throw new NoViableAltException($this);"

TestSetInline(s) ::= <<
<s.bitsets:{bits | <if(rest(rest(bits.ttypes)))><bitsetBitfieldComparison(s, bits)><else><bitsetInlineComparison(s, bits)><endif>}; separator=" || ">
>>

// Java language spec 15.19 - shift operators mask operands rather than overflow to 0... need range test
testShiftInRange(shiftAmount) ::= <<
(($<shiftAmount>) & ~0x3f) == 0
>>

// produces smaller bytecode only when bits.ttypes contains more than two items
bitsetBitfieldComparison(s, bits) ::= <%
(<testShiftInRange({<offsetShift(s.varName, bits.shift)>})> && ((1 \<\< $<offsetShift(s.varName, bits.shift)>) & (<bits.ttypes:{ttype | (1 \<\< <parser.name>Data::<offsetShift(ttype, bits.shift)>)}; separator=" | ">)) != 0)
%>

isZero ::= [
"0":true,
default:false
]

offsetShift(shiftAmount, offset) ::= <%
<if(!isZero.(offset))>(<shiftAmount> - <offset>)<else><shiftAmount><endif>
%>

// produces more efficient bytecode when bits.ttypes contains at most two items
bitsetInlineComparison(s, bits) ::= <%
<bits.ttypes:{ttype | $<s.varName>==<parser.name>Data::<ttype>}; separator=" || ">
%>

cases(ttypes) ::= <<
<ttypes:{t | case <parser.name>Data::<t>:}; separator="\n">
>>

InvokeRule(r, argExprsChunks) ::= <<
$this->setState(<r.stateNumber>);
<if(r.labels)><r.labels:{l | <labelref(l)> = }><endif>$this-><r.name>(<if(r.ast.options.p)><r.ast.options.p><if(argExprsChunks)>,<endif><endif><argExprsChunks>);
>>

MatchToken(m) ::= <<
$this->setState(<m.stateNumber>);
<if(m.labels)><m.labels:{l | <labelref(l)> = }><endif>$this->match(<parser.name>Data::<m.name>);
>>

MatchSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, false)>"

MatchNotSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, true)>"

CommonSetStuff(m, expr, capture, invert) ::= <<
$this->setState(<m.stateNumber>);
<if(m.labels)><m.labels:{l | <labelref(l)> = }>$this->_input.LT(1);<endif>
<capture>
if ( <if(invert)>$<m.varName> \<= 0 || <else>!<endif>(<expr>) ) {
	<if(m.labels)><m.labels:{l | <labelref(l)> = (Token)}><endif>$this->_errHandler->recoverInline($this);
}
else {
	if ( $this->_input->LA(1) == Token::EOF ) $matchedEOF = true;
	$this->_errHandler->reportMatch($this);
	$this->consume();
}
>>

Wildcard(w) ::= <<
$this->setState(<w.stateNumber>);
<if(w.labels)><w.labels:{l | <labelref(l)> = }><endif>$this->matchWildcard();
>>

// ACTION STUFF

Action(a, foo, chunks) ::= "<chunks>"

ArgAction(a, chunks) ::= "<chunks>"

SemPred(p, chunks, failChunks) ::= <<
$this->setState(<p.stateNumber>);
if (!(<chunks>)) throw new FailedPredicateException($this, <p.predicate><if(failChunks)>, <failChunks><elseif(p.msg)>, <p.msg><endif>);
>>

ExceptionClause(e, catchArg, catchAction) ::= <<
catch (<catchArg>) {
	<catchAction>
}
>>

// lexer actions are not associated with model objects

LexerSkipCommand()  ::= "$this->skip();"
LexerMoreCommand()  ::= "$this->more();"
LexerPopModeCommand() ::= "$this->popMode();"

LexerTypeCommand(arg, grammar)      ::= "$this->_type = <arg>;"
LexerChannelCommand(arg, grammar)   ::= "$this->_channel = <arg>;"
LexerModeCommand(arg, grammar)      ::= "$this->_mode = <arg>;"
LexerPushModeCommand(arg, grammar)  ::= "$this->pushMode(<arg>);"

ActionText(t) ::= "<t.text>"
ActionTemplate(t) ::= "<t.st>"
ArgRef(a) ::= "$_localctx.<a.name>"
LocalRef(a) ::= "$_localctx.<a.name>"
RetValueRef(a) ::= "$_localctx.<a.name>"
QRetValueRef(a) ::= "<ctx(a)>.<a.dict>.<a.name>"
/** How to translate $tokenLabel */
TokenRef(t) ::= "<ctx(t)>.<t.name>"
LabelRef(t) ::= "<ctx(t)>.<t.name>"
ListLabelRef(t) ::= "<ctx(t)>.<ListLabelName(t.name)>"
SetAttr(s,rhsChunks) ::= "<ctx(s)>.<s.name> = <rhsChunks>;"

TokenLabelType() ::= "<file.TokenLabelType; null={Token}>"
InputSymbolType() ::= "<file.InputSymbolType; null={Token}>"

TokenPropertyRef_text(t) ::= "(<ctx(t)>-><t.label>!=null?<ctx(t)>-><t.label>->getText():null)"
TokenPropertyRef_type(t) ::= "(<ctx(t)>-><t.label>!=null?<ctx(t)>-><t.label>->getType():0)"
TokenPropertyRef_line(t) ::= "(<ctx(t)>-><t.label>!=null?<ctx(t)>-><t.label>->getLine():0)"
TokenPropertyRef_pos(t) ::= "(<ctx(t)>-><t.label>!=null?<ctx(t)>-><t.label>->getCharPositionInLine():0)"
TokenPropertyRef_channel(t) ::= "(<ctx(t)>-><t.label>!=null?<ctx(t)>-><t.label>->getChannel():0)"
TokenPropertyRef_index(t) ::= "(<ctx(t)>-><t.label>!=null?<ctx(t)>-><t.label>->getTokenIndex():0)"
TokenPropertyRef_int(t) ::= "(<ctx(t)>-><t.label>!=null?(int)(<ctx(t)>-><t.label>->getText()):0)"

RulePropertyRef_start(r) ::= "(<ctx(r)>-><r.label>!=null?(<ctx(r)>-><r.label>->start):null)"
RulePropertyRef_stop(r)	 ::= "(<ctx(r)>-><r.label>!=null?(<ctx(r)>-><r.label>->stop):null)"
RulePropertyRef_text(r)	 ::= "(<ctx(r)>-><r.label>!=null?$this->_input->getText(<ctx(r)>-><r.label>->start,<ctx(r)>-><r.label>->stop):null)"
RulePropertyRef_ctx(r)	 ::= "<ctx(r)>-><r.label>"
RulePropertyRef_parser(r)	 ::= "$this"

ThisRulePropertyRef_start(r) ::= "$_localctx->start"
ThisRulePropertyRef_stop(r)	 ::= "$_localctx->stop"
ThisRulePropertyRef_text(r)	 ::= "$this->_input.getText($_localctx->start, $this->_input->LT(-1))"
ThisRulePropertyRef_ctx(r)	 ::= "$_localctx"
ThisRulePropertyRef_parser(r)	 ::= "$this"

NonLocalAttrRef(s)		 ::= "($this->getInvokingContext(<s.ruleIndex>))-><s.name>"
SetNonLocalAttr(s, rhsChunks)	  ::=
	"($this->getInvokingContext(<s.ruleIndex>))-><s.name> = <rhsChunks>;"

AddToLabelList(a) ::= "<ctx(a.label)>-><a.listName>->add(<labelref(a.label)>);"

TokenDecl(t) ::= "/*<TokenLabelType()>*/ $<t.name> = null"
TokenTypeDecl(t) ::= "/* int */ $<t.name> = 0;"
TokenListDecl(t) ::= "/* List\<Token> */ $<t.name> = []"
RuleContextDecl(r) ::= "/* <r.ctxName> */ $<r.name> = null"
RuleContextListDecl(rdecl) ::= "/*List\<<rdecl.ctxName>>*/ $<rdecl.name> = []"

ContextTokenGetterDecl(t)      ::= <<
public function <t.name>(): TerminalNode
{
	return $this->getToken(<parser.name>Data::<t.name>, 0);
}
>>
ContextTokenListGetterDecl(t)  ::= <<
/**
 * @return TerminalNode[]
 */
public function <t.name>_list(): array
{
	return $this->getTokens(<parser.name>Data::<t.name>);
}
>>
ContextTokenListIndexedGetterDecl(t)  ::= <<
public function <t.name>(int $i = 0): TerminalNode
{
	return $this->getToken(<parser.name>Data::<t.name>, $i);
}
>>
ContextRuleGetterDecl(r)       ::= <<
public function <r.name>_first(): <r.ctxName>
{
	return $this->getRuleContext(<r.ctxName>::class,0);
}
>>
ContextRuleListGetterDecl(r)   ::= <<
/**
 * @return <r.ctxName>[]
 */
public function <r.name>_list(): array
{
	return $this->getRuleContexts(<r.ctxName>::class);
}
>>
ContextRuleListIndexedGetterDecl(r)   ::= <<
public function <r.name>(int $i = null): <r.ctxName>
{
	return null === $i ? $this->getRuleContexts(<r.ctxName>::class) : $this->getRuleContext(<r.ctxName>::class, $i);
}
>>

LexerRuleContext() ::= "RuleContext"

/** The rule context name is the rule followed by a suffix; e.g.,
 *	r becomes rContext.
 */
RuleContextNameSuffix() ::= "Context"

ImplicitTokenLabel(tokenName) ::= "$this-><tokenName>"
ImplicitRuleLabel(ruleName)	  ::= "$this-><ruleName>"
ImplicitSetLabel(id)		  ::= "$this->tset<id>"
ListLabelName(label)		  ::= "$this-><label>"

CaptureNextToken(d) ::= "$<d.varName> = $this->_input->LT(1);"
CaptureNextTokenType(d) ::= "$<d.varName> = $this->_input->LA(1);"

StructDecl(struct,ctorAttrs,attrs,getters,dispatchMethods,interfaces,extensionMembers)
	::= <<
class <struct.name> extends <if(contextSuperClass)><contextSuperClass><else>ParserRuleContext<endif><if(interfaces)> implements <interfaces; separator=", "><endif> {
	<attrs:{a | public <a>;}; separator="\n">
	<getters:{g | <g>}; separator="\n">
	public function __construct(ParserRuleContext $parent, int $invokingState<struct.ctorAttrs:{a | , <if(a.type)><a.type><endif> $<a.name>}>) {
		parent::__construct($parent, $invokingState);
		<struct.ctorAttrs:{a | $this-><a.name> = <a.name>;}; separator="\n">
	}

	public function getRuleIndex(): int
	{
		return <parser.name>Data::RULE_<struct.derivedFromName>;
	}

<if(struct.provideCopyFrom)> <! don't need copy unless we have subclasses !>
	public function copyFrom(<struct.name> $ctx) {
		parent::copyFrom($ctx);
		<struct.attrs:{a | $this-><a.name> = $ctx-><a.name>;}; separator="\n">
	}
<endif>
	<dispatchMethods; separator="\n">
	<extensionMembers; separator="\n">
}
>>

AltLabelStructDecl(struct,attrs,getters,dispatchMethods) ::= <<
class <struct.name> extends <currentRule.name; format="cap">Context {
	<attrs:{a | public <a>;}; separator="\n">
	<getters:{g | <g>}; separator="\n">
	public function __construct(<currentRule.name; format="cap">Context $ctx) { $this->copyFrom($ctx); }
	<dispatchMethods; separator="\n">
}
>>

ListenerDispatchMethod(method) ::= <<
public function <if(method.isEnter)>enter<else>exit<endif>Rule(ParseTreeListener $listener) {
	if ( $listener instanceof <parser.grammarName>Listener ) $listener-><if(method.isEnter)>enter<else>exit<endif><struct.derivedFromName; format="cap">($this);
}
>>

VisitorDispatchMethod(method) ::= <<
public accept(ParseTreeVisitor $visitor) {
	if ( $visitor instanceof <parser.grammarName>Visitor ) return ($visitor->visit<struct.derivedFromName; format="cap">($this);
	else return visitor->visitChildren($this);
}
>>

AttributeDecl(d) ::= "<d.type> <d.name><if(d.initValue)> = <d.initValue><endif>"

/** If we don't know location of label def x, use this template */
labelref(x) ::= "<if(!x.isLocal)>$_localctx-><endif><x.name>"

/** For any action chunk, what is correctly-typed context struct ptr? */
ctx(actionChunk) ::= "($_localctx)"

// used for left-recursive rules
recRuleAltPredicate(ruleName,opPrec)  ::= "\$this->precpred(\$this->_ctx, <opPrec>)"
recRuleSetReturnAction(src,name)	  ::= "$<name>=$<src>.<name>;"
recRuleSetStopToken()                 ::= "$this->_ctx->stop = $this->_input->LT(-1);"

recRuleAltStartAction(ruleName, ctxName, label, isListLabel) ::= <<
$_localctx = new <ctxName>Context($_parentctx, $_parentState);
<if(label)>
<if(isListLabel)>
$_localctx-><label>->add($_prevctx);
<else>
$_localctx-><label> = $_prevctx;
<endif>
<endif>
<if(label)>$_localctx.<label> = $_prevctx;<endif>
$this->pushNewRecursionContext($_localctx, $_startState, <parser.name>Data::RULE_<ruleName>);
>>

recRuleLabeledAltStartAction(ruleName, currentAltLabel, label, isListLabel) ::= <<
$_localctx = new <currentAltLabel; format="cap">Context(new <ruleName; format="cap">Context($_parentctx, $_parentState));
<if(label)>
<if(isListLabel)>
$_localctx-><label>->add($_prevctx);
<else>
$_localctx-><label> = $_prevctx;
<endif>
<endif>
$this->pushNewRecursionContext($_localctx, $_startState, <parser.name>Data::RULE_<ruleName>);
>>

recRuleReplaceContext(ctxName) ::= <<
$_localctx = new <ctxName>Context($_localctx);
$this->_ctx = $_localctx;
$_prevctx = $_localctx;
>>

recRuleSetPrevCtx() ::= <<
if ( $this->_parseListeners!=null ) $this->triggerExitRuleEvent();
$this->_prevctx = $this->_localctx;
>>


LexerFile(lexerFile, lexer, namedActions) ::= <<
<fileHeader(lexerFile.grammarFileName, lexerFile.ANTLRVersion)>
<if(lexerFile.genPackage)>
//package <lexerFile.genPackage>;
<endif>
<namedActions.header>
//import org.antlr.v4.runtime.Lexer;
//import org.antlr.v4.runtime.CharStream;
//import org.antlr.v4.runtime.Token;
//import org.antlr.v4.runtime.TokenStream;
//import org.antlr.v4.runtime.*;
//import org.antlr.v4.runtime.atn.*;
//import org.antlr.v4.runtime.dfa.DFA;
//import org.antlr.v4.runtime.misc.*;

<lexer>
>>

Lexer(lexer, atn, actionFuncs, sempredFuncs, superClass) ::= <<

class <lexer.name>Data
{
	/**
	 * @var <lexer.name>Data
	 */
	protected static $instance;

	/**
	 * @var Atn
	 */
	protected $atn;

	/**
	 * @var DFA[]
	 */
	protected $decisionToDFA;

	/**
	 * @var PredictionContextCache
	 */
	protected $sharedContextCache;

	/**
	 * @var Vocabulary
	 */
	protected $vocabulary;

	const GRAMMAR_FILE_NAME = "<lexer.grammarFileName; format="java-escape">";

	<if(lexer.tokens)>
	const
		<lexer.tokens:{k | <k>=<lexer.tokens.(k)>}; separator=", ", wrap, anchor>;
	<endif>
	<if(lexer.channels)>
	const
		<lexer.channels:{c | <c>=<lexer.channels.(c)>}; separator=", ", wrap, anchor>;
	<endif>
	<if(rest(lexer.modes))>
	const
		<rest(lexer.modes):{m | <m>=<i>}; separator=", ", wrap, anchor>;
	<endif>
	const CHANNEL_NAMES = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"<if (lexer.channels)>, <lexer.channels:{c| "<c>"}; separator=", ", wrap, anchor><endif>
	];

	const MODE_NAMES = [
		<lexer.modes:{m| "<m>"}; separator=", ", wrap, anchor>
	];

	const RULE_NAMES = [
		<lexer.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
	];

    <atn>

	static public function getInstance(): <lexer.name>Data
	{
		if (null === self::$instance) {
			self::$instance = new self();
		}

		return self::$instance;
	}

	protected function __construct()
	{
		Assert::equal("<lexerFile.ANTLRVersion>", RuntimeMetaData::VERSION);

		$this->vocabulary = new VocabularyImpl(self::LITERAL_NAMES, self::SYMBOLIC_NAMES);
		$this->atn = (new ATNDeserializer())->deserialize(str_split(self::SERIALIZED_ATN));

		for ($i = 0; i \< $this->atn->getNumberOfDecisions(); $i++) {
			$this->decisionToDfa[$i] = new DFA($this->atn->getDecisionState($i), $i);
		}
	}

	public function getAtn(): Atn
	{
		return $this->atn;
	}

	/** @return DFA[] */
	public function getDecisionToDfa(): array
	{
		return $this->decisionToDfa;
	}

	public function getSharedContextCache(): PredictionContextCache
	{
		return $this->sharedContextCache;
	}
}

class <lexer.name> extends <superClass; null="Lexer"> {

	/**
	 * @var LexerATNSimulator
	 */
	protected $interp;

	<namedActions.members>

	public function __construct(CharStream $input) {
		parent::__construct($input);
		$data = <lexer.name>Data::getInstance();
		$this->interp = new LexerATNSimulator($this, $this->atn, $this->decisionToDFA, $this->sharedContextCache);
	}


	<dumpActions(lexer, "", actionFuncs, sempredFuncs)>
	<atn>
}
>>

SerializedATN(model) ::= <<
<! only one segment, can be inlined !>
const SERIALIZED_ATN =
    "<model.serialized; wrap={".<\n><\t>"}>";

>>

/** Using a type to init value map, try to init a type; if not in table
 *	must be an object, default value is "null".
 */
initValue(typeName) ::= <<
<javaTypeInitMap.(typeName)>
>>

codeFileExtension() ::= ".php"
